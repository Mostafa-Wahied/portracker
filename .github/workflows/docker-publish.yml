name: Build and Publish Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: portracker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Create a temporary data directory for the test
          mkdir -p $RUNNER_TEMP/portracker-test-data
          
          # Start container with all necessary mounts
          docker run --rm -d --name test-portracker \
            -p 4999:4999 \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v $RUNNER_TEMP/portracker-test-data:/data \
            -e PORT=4999 \
            -e DATABASE_PATH=/data/test.db \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for startup
          sleep 15
          
          # Check if container is still running
          if ! docker ps | grep test-portracker; then
            echo "❌ Container failed to start or crashed"
            echo "📋 Container logs:"
            docker logs test-portracker 2>/dev/null || echo "No logs available"
            exit 1
          fi
          
          # Test the health endpoint
          if curl -f http://localhost:4999/api/health; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            echo "📋 Container logs:"
            docker logs test-portracker
            docker stop test-portracker
            exit 1
          fi
          
          echo "✅ Container test completed successfully"
          docker stop test-portracker
